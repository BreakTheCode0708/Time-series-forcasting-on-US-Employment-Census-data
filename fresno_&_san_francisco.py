# -*- coding: utf-8 -*-
"""Fresno & San_Francisco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hfcN3CVnf6EUNREJP_me6Qiqu7nJwsa4

# Importing necessary libraries
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing, Holt
from pylab import rcParams  

import warnings
warnings.filterwarnings('ignore')

from sklearn.metrics import mean_squared_error as mse
from math import sqrt

plt.style.use('fivethirtyeight')

"""# Reading & describing the data"""

df = pd.read_csv('/content/Fresno.csv')

df.shape

df.head()

df.columns

df.info()

df.dropna(inplace = True)

df  = df.set_index('Month',drop = True)

df['Values'].plot(figsize=(15,5))

df['Values'].describe()

"""# Simple Exponential Smoothing - Fresno


"""

data = df['Values']

fit1 = SimpleExpSmoothing(data).fit(smoothing_level = 0.2,optimized = False)
fit2 = SimpleExpSmoothing(data).fit(smoothing_level = 0.8,optimized = False)

df['Values'].plot(figsize=(15,5),marker='o',color='black')
fit1.fittedvalues.plot(figsize=(15,5),marker='+',color='red')
fit2.fittedvalues.plot(figsize=(15,5),marker='o',color='blue')

"""Simple Exponential Smoothing Model"""

train = df.head(236)
test = df.tail(12)

#MSE
model = SimpleExpSmoothing(train.Values).fit(smoothing_level=0.2)

pred_test = model.predict(len(train),len(data)-1)
pred_train = model.predict(train.index[0],train.index[-1])

mse_test = mse(pred_test,test.Values)
mse_train = mse(pred_train,train.Values)

mse_train, mse_test

#RMSE

rmse_test = sqrt(mse_test)
rmse_train = sqrt(mse_train)

rmse_train, rmse_test
print('RMSE of SimpleExp.Smoothing test =>',rmse_test)

plt.figure(figsize=(15,5))
plt.plot(train.Values,label='train')
plt.plot(test.Values,label='actual')
plt.plot(pred_train,label='train_prediction')
plt.plot(pred_test,label='test_prediction',marker='+')
plt.legend(loc='best')
plt.show()

pred_test    #predicted values

test          #actual

model.summary()

"""# Holts Method"""

fit11 = Holt(data).fit()
fit21 = Holt(data, exponential = True).fit()

df['Values'].plot(figsize=(18,8),marker='o',color='black')
fit11.fittedvalues.plot(figsize=(18,8),marker='o',color='red')
fit21.fittedvalues.plot(figsize=(18,8),marker='o',color='blue')

"""Holts model"""

from statsmodels.tsa.holtwinters import Holt

train_h = df.iloc[0:237]
test_h = df.iloc[237:248]

model_h = Holt(train_h).fit(smoothing_level=0.2, smoothing_slope=0.2, optimized=True)

pred_test_h = model_h.predict(len(train_h),len(data)-1)
pred_train_h  = model_h.predict(train_h.index[0],train_h.index[-1])

mse_test_h = mse(pred_test_h, test_h.Values)
mse_train_h = mse(pred_train_h ,train_h.Values)

mse_test_h, mse_train_h

#RMSE

rmse_test_h = sqrt(mse_test_h)
rmse_train_h = sqrt(mse_train_h)

rmse_train_h, rmse_test_h
print('RMSE of holt test =>',rmse_test_h)

plt.figure(figsize=(15, 6))
plt.plot(train_h.index, train_h, label='train', c='red')
plt.plot(test_h.index, test_h, label='actual', c='orange')
plt.plot(pred_train_h.index, pred_train_h, label='train_prediction',marker='+', c='cornflowerblue')
plt.plot(pred_test_h.index, pred_test_h, label='test_prediction', marker='+',c='green')
plt.legend(loc='best')
plt.show()

pred_test_h   #predicted

test      #values

model_h.summary()

"""# San Francisco"""

df1 = pd.read_csv('/content/Exp.Smoothing.csv')

df1.shape

df1.columns

df1.head()

df1 =  df1.drop(['Forecast','Error','Error^2','Unnamed: 5','Unnamed: 6'],axis=1)

df1.dropna(inplace = True)

df1.shape

df1.info()

df1['Values'] = df1['Values'].astype(int)

df1.info()

df1['Values'].describe()

df1  = df1.set_index('Month',drop = True)

df1['Values'].plot(figsize=(15,5))

"""# Simple Exponential Smoothing - San Francisco"""

data1 = df1['Values']

fit_21 = SimpleExpSmoothing(data1).fit(smoothing_level = 0.2,optimized = False)
fit_22 = SimpleExpSmoothing(data1).fit(smoothing_level = 0.8,optimized = False)

df1['Values'].plot(figsize=(15,5),marker='o',color='black')
fit_21.fittedvalues.plot(figsize=(15,5),marker='+',color='red')
fit_22.fittedvalues.plot(figsize=(15,5),marker='o',color='blue')

"""Simple Exp.model"""

train1 = df1.head(236)
test1 = df1.tail(12)

#MSE
model1 = SimpleExpSmoothing(train1.Values).fit(smoothing_level=0.2)

pred_test1 = model.predict(len(train1),len(data1)-1)
pred_train1 = model.predict(train1.index[0],train1.index[-1])

mse_test1 = mse(pred_test1,test1.Values)
mse_train1 = mse(pred_train1,train1.Values)

mse_train1, mse_test1

#RMSE

rmse_test1 = sqrt(mse_test1)
rmse_train1 = sqrt(mse_train1)

rmse_train1, rmse_test1
print('RMSE of SimpleExp.Smoothing test =>',rmse_test1)

plt.figure(figsize=(15,5))
plt.plot(train1.Values,label='train')
plt.plot(test1.Values,label='actual')
plt.plot(pred_train1,label='train_prediction')
plt.plot(pred_test1,label='test_prediction',marker='+')
plt.legend(loc='best')
plt.show()

pred_test1   #predicted

test1    #actual

model1.summary()

"""# Holts method"""

fit_h = Holt(data1).fit()
fit2_h= Holt(data1, exponential = True).fit()

df1['Values'].plot(figsize=(18,8),marker='o',color='black')
fit_h.fittedvalues.plot(figsize=(18,8),marker='o',color='red')
fit2_h.fittedvalues.plot(figsize=(18,8),marker='o',color='blue')

"""Holts model"""

from statsmodels.tsa.holtwinters import Holt

train_h1 = df1.iloc[0:237]  #pre-covid + covid
test_h1 = df1.iloc[237:248]  #post-covid

model_h1 = Holt(train_h1).fit(smoothing_level=0.2, smoothing_slope=0.2, optimized=True)

pred_test_h1 = model_h1.predict(len(train_h1),len(data)-1)
pred_train_h1  = model_h1.predict(train_h1.index[0],train_h1.index[-1])

mse_test_h1 = mse(pred_test_h1, test_h1.Values)
mse_train_h1 = mse(pred_train_h1 ,train_h1.Values)

mse_test_h1, mse_train_h1

#RMSE

rmse_test_h1 = sqrt(mse_test_h1)
rmse_train_h1 = sqrt(mse_train_h1)

rmse_train_h1, rmse_test_h1
print('RMSE of holt test - Los Angeles =>',rmse_test_h1)

plt.figure(figsize=(15, 6))
plt.plot(train_h1.index, train_h1, label='train', c='red')
plt.plot(test_h1.index, test_h1, label='actual', c='orange')
plt.plot(pred_train_h1.index, pred_train_h1, label='train_prediction',marker='+', c='cornflowerblue')
plt.plot(pred_test_h1.index, pred_test_h1, label='test_prediction', marker='+',c='green')
plt.legend(loc='best')
plt.show()

pred_test_h1       #predicted values

df1.tail(12) #actual values

model_h1.summary()

"""# Prophet Model"""

from prophet import Prophet

df2 = pd.read_csv('/content/Fresno1.csv')

df2

df2.dropna(inplace=True)

df2.shape

df2.tail(5)

df2.info()

df2 = df2.drop(['Month'],axis=1)

df2

df2['Values'] = df2['Values'].astype(int)

df2.columns = ['ds','y']

df2.head(5)

df2['ds'] = pd.to_datetime(df2['ds'],infer_datetime_format=True)

df2.info()

df2.head(14)

model_fb = Prophet()
model_fb.fit(df2)

pred = model_fb.make_future_dataframe(freq='M',periods=11)

pred.head(15)

pred.tail(5)

forecast = model_fb.predict(pred)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

fig1 = model_fb.plot(forecast)

fig2 = model_fb.plot_components(forecast)   #trends,yearly

from prophet.plot import plot_plotly, plot_components_plotly

plot_plotly(model_fb, forecast)

#Cross Validation

from prophet.diagnostics import cross_validation

df2_cv = cross_validation(model_fb,initial ='730 days', period = '180 days',horizon = '365 days')

df2_cv.head()

df2_cv.tail()

from prophet.diagnostics import performance_metrics

df2_pm = performance_metrics(df2_cv,rolling_window=0.1)

df2_pm.head()

from prophet.plot import plot_cross_validation_metric
fig3 = plot_cross_validation_metric(df2_cv, metric = 'rmse')

"""# Using Train & Test

"""

train = df2[(df2['ds'] >= '2002-01-01') & (df2['ds'] <= '2021-09-01')]
test =  df2[(df2['ds'] > '2021-09-01')]

train.shape

test.shape

train.tail(10)

test.head()

m = Prophet(interval_width = 0.95)

m.fit(train)

future = m.make_future_dataframe(freq='M',periods=11)
future.tail(12)

forecast1 = m.predict(future)
forecast1[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)

pd.concat([df2.set_index('ds')['y'],forecast1.set_index('ds')['yhat']],axis=1).plot(figsize = (15,5))

m.plot(forecast1,figsize=(15,5))

plot_plotly(m, forecast1)

"""#Train and Test - Recent Data"""

train1 = df2[(df2['ds'] >= '2017-01-01') & (df2['ds'] <= '2021-09-01')]
test1 =  df2[(df2['ds'] > '2021-09-01')]

train1.shape

test1.shape

train1.head()

test1.head()

m1 = Prophet(interval_width = 0.95)

m1.fit(train1)

future1 = m1.make_future_dataframe(freq='M',periods=12)
df2.tail(5)

forecast2 = m1.predict(future1)
forecast2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(7)

plot_plotly(m1, forecast2)

pd.concat([df2.set_index('ds')['y'][200:],forecast2.set_index('ds')['yhat']],axis=1).plot(figsize = (15,5))

"""#Using Changepoints

"""

from prophet.plot import add_changepoints_to_plot
fig11 = model_fb.plot(forecast)
a = add_changepoints_to_plot(fig11.gca(), model_fb, forecast,threshold = 0.5)

plot_plotly(model_fb,forecast)

"""Manually adding Changepoints and Changing changepoint_prior_scale to 0.5

"""

mp = Prophet(changepoints=['2020-03-01', '2020-04-01', '2020-06-01', '2020-07-01', '2020-08-01'],changepoint_prior_scale=0.5,changepoint_range=0.8)
forecasting = mp.fit(df2).predict(future)
#mp.plot(forecast);

from prophet.plot import add_changepoints_to_plot
fig23 = mp.plot(forecasting)
a2 = add_changepoints_to_plot(fig23.gca(), mp, forecasting)

plot_plotly(mp, forecasting)

"""Lockdowns as Holidays"""

lockdowns = pd.DataFrame([
    {'holiday': 'lockdown_1', 'ds': '2020-03-21', 'lower_window': 0, 'ds_upper': '2020-06-06'},
    {'holiday': 'lockdown_2', 'ds': '2020-07-09', 'lower_window': 0, 'ds_upper': '2020-10-27'},
    {'holiday': 'lockdown_3', 'ds': '2021-02-13', 'lower_window': 0, 'ds_upper': '2021-02-17'},
    {'holiday': 'lockdown_4', 'ds': '2021-05-28', 'lower_window': 0, 'ds_upper': '2021-06-10'},
])
for col in ['ds', 'ds_upper']:
    lockdowns[col] = pd.to_datetime(lockdowns[col])
lockdowns['upper_window'] = (lockdowns['ds_upper'] - lockdowns['ds']).dt.days
lockdowns

m2 = Prophet(holidays=lockdowns)
m2 = m2.fit(df2)
future2 = m2.make_future_dataframe(freq = 'M', periods=12)
forecast_22 = m2.predict(future2)

m3_changepoints = (
    # 10 potential changepoints in 2.5 years
    pd.date_range('2017-06-02', '2020-01-01', periods=10).date.tolist() +
    # 15 potential changepoints in 1 year 2 months
    pd.date_range('2020-02-01', '2021-04-01', periods=15).date.tolist()
)

m3 = Prophet(holidays=lockdowns, changepoints=m3_changepoints, changepoint_prior_scale=1.0)
m3 = m3.fit(df2)
forecast_33 = m3.predict(future2)

from prophet.plot import add_changepoints_to_plot
fig12= m3.plot(forecast_33)
a = add_changepoints_to_plot(fig12.gca(), m3, forecast_33)

plot_plotly(m3,forecast_33)

df2.tail(5)

forecast_33[['ds', 'yhat']].tail(17)

pd.concat([df2.set_index('ds')['y'],forecast_33.set_index('ds')['yhat']],axis=1).plot(figsize = (15,5))